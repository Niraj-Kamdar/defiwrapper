#import { Protocol } into ProtocolResolver from "ens/interface.protocol-resolvers.defiwrapper.eth"

type Query {
  getProtocol(
    """
    Returns the protocol information for the given protocol token.
    It lazily resolves he protocol and validate it against the protocol registry.
    Note: This is more secure than the resolveProtocol but takes more time to execute.
    """
    tokenAddress: String!
  ): ProtocolResolver_Protocol

  resolveProtocol(
    """
    lazily resolves the protocol using token metadata and returns it
    Note: It may not return correct protocol since it doesn't rely on on-chain registry so use at your own risk
    """
    tokenAddress: String!
  ): ProtocolResolver_Protocol

  isValidProtocolToken(
    """
    Returns true if the given token is a valid protocol token
    """
    tokenAddress: String!
    protocolId: String!
    protocolAdapterUri: String!
  ): Boolean!

  """
  Returns the list of supported protocols
  """
  supportedProtocols: [ProtocolResolver_Protocol!]!

  # Implement following methods when needed

  # TODO
  # supportedProtocolVersions(protocolName: String!): [String!]!

  # TODO
  # getProtocolById(protocolId: String!): Protocol!

  # TODO
  # getProtocolsByName(protocolName: String!): [Protocol!]!

  # TODO: getProtocol -> TokenResolver.getTokenComponents
  # getTokenComponents(
  #   """
  #   Returns the effective token components balance in the currencies given by client for the given token
  #   """
  #   tokenAddress: String!
  #   multiplier: Int  # multiply all the underlying token amount with the multiplier (default: 1)
  #   vsCurrencies: [String!]  # If specified returns price of token in the list of given currencies.
  #   noTruncate: Boolean  # returns the full recursive components tree (default: false)
  #   underlyingPrice: Boolean  # If specified returns price of underlying token componenets in the given currencies.
  # ): AssetBalance!

  # getTokenPrice(
  #   """
  #   Returns the price of the token in the given list of currencies
  #   """
  #   tokenAddress: String!
  #   balance: Int  # token balance (default: 1)
  #   vsCurrencies: [String!]  # If specified returns price of token in the list of given currencies.
  # ): TokenBalance

  # getAssetBalance(
  #   """
  #   Returns the balance of the token with underlying components in the given currencies for the given account
  #   """
  #   accountAddress: String!
  #   tokenAddress: String!
  #   vsCurrencies: [String!]
  #   noTruncate: Boolean  # returns the full recursive components tree (default: false)
  #   underlyingPrice: Boolean  # If specified returns price of underlying token componenets in the given currencies.
  # ): AssetBalance!

  getAccountBalance(
    """
    Returns the list of asset balance for all the assets given account has
    """
    accountAddress: String!
    vsCurrencies: [String!]
    noTruncate: Boolean # returns the full recursive components tree (default: false)
    underlyingPrice: Boolean # If specified returns price of underlying token componenets in the given currencies.
  ): AccountBalance!

  # getAccountTokenBalances(
  #   accountAddress: String!
  # ): [TokenBalance!]!
}

# type AssetBalance {
#   tokenComponentBalance: TokenComponentBalance!
#   apy: String
#   apr: String
#   isDebt: Boolean!
#   claimableTokens: [TokenBalance!]!
# }

# type AccountBalance {
#   account: String!
#   network: String!
#   balances: [AssetBalance!]!
# }

# type TokenComponentBalance {
#   token: TokenBalance!
#   unresolvedComponents: Int!
#   components: [TokenComponentBalance!]!
# }
